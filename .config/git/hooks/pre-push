#!/bin/sh
#
# Git pre-push hook to check for "fixup!" and "squash!" in commit messages,
# which are not meant to get pushed to public/non-PR branches.
#
# It will also prevent fast-forward pushes, because git-log fails for them.
#
# You can use `--no-verify` with git-push to skip this hook.
#
# Args:
# 1: name of the remote
# 2: location of the remote
# stdin: <local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF

# Which remote heads/branches to check?
# (a regular expression for "grep -E").
CHECK_REMOTE_HEADS='^(master|production|staging)$'

# The log pattern to check.
# (a regular expression for "git grep")
# TODO: `git log --pretty=format:%s | grep -Eq '^(fixup|squash)'` seems to be better?!
BAD_LOG_PATTERN='^(fixup!|squash!)'

# Uncomment for debugging.
# (the ":" is there so the function can be "empty")
debug() {
  :
  # echo "debug: $@"
}
debug "$0: $1 $2 ($#)"

# Return status of the script.
ret=0

while read -r local_ref local_sha remote_ref remote_sha; do
  debug "Pushing: $local_ref ($local_sha) => $remote_ref ($remote_sha)"

  # Is this a new remote ref?
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    log_arg="$local_sha"
  else
    log_arg="${remote_sha}..${local_sha}"
  fi

  # Skip certain branches, but no other refs (tags).
  remote_head=${remote_ref#refs/heads/}
  if [ "$remote_ref" != "$remote_head" ]; then
    # This is a head/branch (no tag).

    # Allow any non-protected branch.
    if ! echo "$remote_head" | grep -qE "$CHECK_REMOTE_HEADS"; then
      debug "Skipping remote head: $remote_ref ($remote_head)"
      continue
    fi
  fi

  # Check for the bad log pattern.
  log_cmd="git log --extended-regexp --grep $BAD_LOG_PATTERN --color=always $log_arg"
  log="$($log_cmd 2>&1)"
  log_ret=$?
  if [ "$log_ret" != 0 ]; then
    echo 'ERROR (pre-push hook)!' >&2
    echo 'git-log failed (non-fast-forward?!)' >&2
    echo "cmd: $log_cmd" >&2
    echo "log: $log" >&2
    ret=1

  elif [ -n "$log" ]; then
    echo 'ERROR (pre-push hook)!' >&2
    echo "There are commits with a bad pattern ($BAD_LOG_PATTERN)!" >&2
    echo "        local_ref: $local_ref => remote_ref: $remote_ref" >&2
    debug "cmd: $log_cmd" >&2
    echo "$log" | sed 's/^/  /' >&2
    ret=1
  fi
done

debug "ret=$ret"
exit $ret
